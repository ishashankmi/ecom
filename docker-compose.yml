version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: saras-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
    container_name: saras-backend
    restart: unless-stopped
    environment:
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: mydb
      DB_USER: myuser
      DB_PASSWORD: mypassword
      JWT_SECRET: your-super-secret-jwt-key-here
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3002/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  seed:
    build:
      context: ./backend
    container_name: saras-seed
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: mydb
      DB_USER: myuser
      DB_PASSWORD: mypassword
    depends_on:
      backend:
        condition: service_started
      postgres:
        condition: service_healthy
    command: sh -c "sleep 10 && node seed-data.js"
    restart: "no"

  frontend:
    build:
      context: .
    container_name: saras-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: /api
    ports:
      - "3000:3000"
    depends_on:
      - seed
    volumes:
      - .:/app
      - /app/node_modules

  nginx:
    image: nginx:alpine
    container_name: saras-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  postgres_data: